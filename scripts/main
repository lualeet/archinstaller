#!/bin/sh
if [ `whoami` = "root" ]; then
	echo " -> ran as root, not what u want"
	usercount=`ls /home/ | wc -l`
	if [ $usercount = 1 ]; then
		user=`ls /home/`
		echo " -> one user found, continuing as $user"
		if [ -d /tmp/scripts ]; then
			rm -rf /tmp/scripts
		fi;
		cp -r scripts "/tmp/"
		roothome=$HOME
		export HOME="/home/$user"
		sudo -u $user sh -c "cd /home/$user/; /tmp/scripts/main"
		export HOME=$roothome
		exit
	else
		echo " -> too many (or no) non-root users found, stopping"
		exit 1
	fi;
else
	echo " -> running as `whoami`"
fi;

if ! [ -d /tmp/scripts ]; then
	cp -r scripts "/tmp/"
fi;

temppackages=""

cleanup() {
	aurhelper="sudo pacman"
	if [ -f /usr/bin/yay ]; then
		aurhelper=yay
	fi;

	for package in $temppackages; do
		eval $aurhelper -Rscn $1 || echo " -> failed to remove package $1"
	done
	exit 0
}

getdep() {
	aurhelper="sudo pacman"
	if [ -f /usr/bin/yay ]; then
		aurhelper=yay
	fi;

	echo " -> checking dependency $1"

		if ! [ -z $2 ] && [ $2 = "temp" ]; then
			temppackages="$temppackages $1"
		fi;
		eval $aurhelper -S `echo $1 | sed "s/, / /g"` --noconfirm --needed
}

announce() {
	echo " -> configuring $1"
	cd "/tmp/scripts/config/$1"
	i=0
	while [ $i = 0 ]; do
		i=1
		trap "echo script $1 errored; break" ERR
		source `pwd`/start
	done
	trap - ERR
	echo " -> finished $1"
	cd "/tmp/scripts"
}

announce yay
announce configure
announce tmux
announce zsh
announce zsh-plugins

announce picom
announce dunst
announce i3
announce xorg
announce kvantum
announce powerline

announce junk
cleanup

